===== dummy =====

==== useful links ====
  * [[https://www.programiz.com/python-programming/online-compiler/ | Online python compiler]] (programiz.com)
    * can be useful while doing live coding interviews.
  * [[https://nedbatchelder.com/text/names.html | Facts and myths about Python names and values]] (nedbatchelder.com) - well explained.

==== validate inputs ====
Sample snippet:
<code>
day = 'foo'
valid_days = ['sun', 'mon', 'tue']
assert day in valid_days, '{} is not a valid day. '\
                          'It should be one of {}'.format(day, valid_days)
</code>
Sample output:
<code>
---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
<ipython-input-4-70d26d6f2c6d> in <module>
----> 1 assert day in valid_days, '{} is not a valid day. '\
      2                           'It should be one of {}'.format(day, valid_days)

AssertionError: foo is not a valid day. It should be one of ['sun', 'mon', 'tue']
</code>
==== where is a module imported from ====
tags | module path

one way:
<code>
import importlib
importlib.util.find_spec("foo")
</code>

Alternative:
<code>
import imp
imp.find_module("foo")
</code>

Note:
  * The imp module is deprecated in favour of importlib. So use the first approach whenever possible.

==== get the function name ====
<code>
my_function.__name__
</code>
Ref:- https://stackoverflow.com/questions/251464/how-to-get-a-function-name-as-a-string

==== empty file ====
Task: If input file is empty, write an empty output file
<code>
import os
if os.stat(input_file).st_size == 0:
    logger.info('Input file is empty.')
    logger.info('Writing an empty output file.')
    with open(output_file, 'w') as fp:
        pass
</code>

==== config files ====
  * https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.defaults - start from here to see the list of functions available
  * use extension .cfg for config files.
    * based on: https://docs.python.org/3/library/configparser.html -> search for .cfg
    * another choice is .ini . But I prefer .cfg over .ini
    * more info on INI: https://en.wikipedia.org/wiki/INI_file

==== python mailing list ====
  * archives -https://mail.python.org/pipermail/python-list/
  * list info - https://mail.python.org/mailman/listinfo/python-list
==== python reference ====
  * operator precedence - https://docs.python.org/3/reference/expressions.html#operator-precedence

==== python tutorials ====
  * Classes - https://docs.python.org/3/tutorial/classes.html
  * https://docs.python.org/3/tutorial/index.html

==== python release cycle ====
  * https://python-release-cycle.glitch.me/ - useful to check when a Python version was released and when it would be EOL.

==== tasks ====
  * [[get urls in a url]]

==== isinstance experiments ====
<code>
In [1]: 
isinstance(True, int)
Out[1]: 
True

In [2]: 
type(True) is int
Out[2]: 
False
</code>
Using Python 3.9.5

==== write an extra line to file ====

<code>
with open('filename.txt', 'w') as fh:
  fh.write('\n')
</code>

Do not use os.linesep as a line terminator when writing files opened in text mode (the default); use a single '\n' instead, on all platforms.

Ref:- https://docs.python.org/3/library/os.html#os.linesep

See also:- https://stackoverflow.com/questions/4025760/python-file-write-creating-extra-carriage-return
===== Snippets =====
==== check for minimum python version ====
<code>
import sys
if sys.version_info[:2] < (3, 7):
    raise RuntimeError('Requires Python 3.7 or greater')
</code>
==== print exception and continue ====
<code>
from traceback import format_exc

try:
    # my code
except Exception as exc:
    print 'caught exception while doing foo'
    print format_exc()
    print exc
</code>

==== print exception to log file ====
<code>
from traceback import format_exc

try:
    # my code
except Exception as exc:
    logger.error('Caught exception while doing stuff.')
    logger.error(format_exc())
    logger.error(exc)
</code>

When the code is executed in pycharm and the exception is encountered, the traceback is printed in both pycharm window and in the file.

To test the above code, you can raise a simple exception using
<code>
raise ValueError("test exception handling.")
</code>

==== sleep for 10 seconds ====
tags | sleep for N seconds

<code>
from time import sleep
sleep(10)
</code>

Ref:- https://realpython.com/python-sleep/ - well written article that talks about how you might use the sleep function in real life. Worth reading end-to-end once.


===== format related =====
==== assert variable in a list ====
<code>
$ cat junk51.py
letters = ["a", "b", "c"]
x = "1"
assert x in letters, "{} is not a valid letter. It should be one of {}".format(
    x, letters
)

$ python junk51.py
Traceback (most recent call last):
  File "C:\Users\kkusuman\x\junk51.py", line 3, in <module>
    assert x in letters, "{} is not a valid letter. It should be one of {}".format(
AssertionError: 1 is not a valid letter. It should be one of ['a', 'b', 'c']
</code>
===== stack overflow links I came across =====
==== memory consumed by a function ====
  * https://stackoverflow.com/a/49271549
    * refers to | http://web.archive.org/web/20180416235121/http://ihorbobak.com/index.php/2018/02/22/python-process-memory-profiling/

==== call different functions based on variable ====
tags | passing function, function as value in dictionary, dispatch

  * https://softwareengineering.stackexchange.com/questions/182093/why-store-a-function-inside-a-python-dictionary/182095

==== __all__ ====
  * https://stackoverflow.com/questions/44834/what-does-all-mean-in-python - good explanation by Alec Thomas
  * https://docs.python.org/3/tutorial/modules.html#importing-from-a-package - link to documentation; referenced in the above stackoverflow link.
==== dummy ====
  * https://superuser.com/questions/1633073/why-are-tar-xz-files-15x-smaller-when-using-pythons-tar-library-compared-to-mac - Why are tar.xz files 15x smaller when using Python's tar library compared to macOS tar?
