===== dummy =====
==== when was a package installed ====
To find out when I installed the dokuwiki package, I did
<code>
$ zgrep installed /var/log/dpkg.log* | grep dokuwiki | grep -v "half-installed"
/var/log/dpkg.log.2.gz:2022-12-06 17:15:37 status installed dokuwiki:all 0.0.20220731.a-1
</code>

without the ''grep -v "half-installed"'' at the end, I was getting
<code>
raju@minion:~$ zgrep installed /var/log/dpkg.log* | grep dokuwiki 
/var/log/dpkg.log.2.gz:2022-12-06 17:15:33 status half-installed dokuwiki:all 0.0.20180422.a-2.1
/var/log/dpkg.log.2.gz:2022-12-06 17:15:37 status installed dokuwiki:all 0.0.20220731.a-1
</code>

Got this idea from https://www.cyberciti.biz/faq/debian-ubuntu-linux-find-package-installed-updated-date/

==== links in this wiki ====
  * [[sources.list]]

==== find the dpi of images in a pdf ====
<code>
$ pdfimages -list deptest.pdf
</code>

Ref:- https://askubuntu.com/questions/760993/how-to-programmatically-determine-dpi-of-images-in-pdf-file

==== combine multiple jpegs into one pdf ====
snippet 1:
<code>
convert *.jpg file.pdf
</code>

snippet 2:
<code>
 % cat combine_pics.sh
#! /usr/bin/env bash

script_dir=`dirname "$0"`
cd $script_dir/bin
convert `ls -v individual_pics/*.jpeg` all_pics_combined.pdf
</code>

Ref:- https://stackoverflow.com/questions/13618236/merge-multiple-jpg-into-single-pdf-in-linux

==== apt-cache search with tags ====
Use axi-cache instead of apt-cache
<code>
axi-cache search term tag
</code>
For example
<code>
 % axi-cache search scanner suite::kde
2 results found.
Results 1-2:
100% skanlite - image scanner based on the KSane backend
68% skanlite:i386 - image scanner based on the KSane backend
More terms: ksane skanlite backend image based attached scanning
More tags: hardware::scanner works-with-format::png works-with-format::jpg use::scanning works-with::image:raster works-with::image scope::application
</code>

If we are using apt-cache, it would not be possible to "discover" skanlite unless we know the right set of keywords. For example, searching for 'scanner' and 'kde' would not have told us about skanlite package.
<code>
 % apt-cache search scanner kde
clamtk - graphical front-end for ClamAV
libkf5sane-data - scanner library (data files)
libkf5sane-dev - scanner library development headers
libkf5sane5 - scanner library (runtime)
</code>

Ref:- https://debian-handbook.info/browse/stable/sect.apt-cache.html

==== bullseye release ====
  * https://release.debian.org/bullseye/freeze_policy.html

==== status of debian testing ====
Useful links:
  * https://bugs.debian.org/release-critical/other/testing.html - Shows the number of release critical bugs that are affecting testing
  * https://bugs.debian.org/release-critical/ - Shows how many release critical are there that affect next release
  * https://www.debian.org/releases/testing/ - contains a link to release-critical bugs


==== distribution name ====
Use
<code>
lsb_release -cs
</code>
Sample run
<code>
 % lsb_release -cs
buster
</code>

Ref:- I came across it in https://www.texmacs.org/tmweb/download/linux-repos.en.html#debian

==== debconf23 video archive ====
  * https://meetings-archive.debian.net/pub/debian-meetings/2023/DebConf23/

===== packages I came across =====
==== python3-full ====
  * python3-full package - https://packages.debian.org/stable/python3-full
    * This will include python, venv and pip.
    * If you just install the https://packages.debian.org/stable/python3 package, it will not have venv.

Ref:- https://snarky.ca/how-virtual-environments-work/ -> "Introducing microvenv" section -> first paragraph
