===== dummy =====
==== useful links ====
  * https://mywiki.wooledge.org/ArithmeticExpression - Arithmetic Expansion 
===== getopts =====
==== useful articles ====
  * https://sookocheff.com/post/bash/parsing-bash-script-arguments-with-shopts/ - Parsing bash script options with getopts

===== Shell =====
==== what is the use of histappend? ====
See
  * https://unix.stackexchange.com/questions/6501/why-would-anyone-not-set-histappend-in-bash

===== code snippets =====
==== getopts shift OPTIND ====
<code>
shift "$((OPTIND-1))"
</code>

Notes:
  * The quotes are important for reasons explained in https://unix.stackexchange.com/questions/214141/explain-the-shell-command-shift-optind-1/

==== check if an integer is in an interval ====
<code>
    current_minute=`date +'%M'`
    clean_up_start_minute=40
    clean_up_end_minute=50
    if (( $current_minute >= $clean_up_start_minute )) &&
       (( $current_minute < $clean_up_end_minute )) ;
    then
        /* do something */
    fi
</code>

<code>
$ (( 5 >= 15 )) && (( 5 < 30 ))  && echo 1 || echo 0
0

$ (( 15 >= 15 )) && (( 15 < 30 ))  && echo 1 || echo 0
1

$ (( 20 >= 15 )) && (( 20 < 30 ))  && echo 1 || echo 0
1

$ (( 30 >= 15 )) && (( 30 < 30 ))  && echo 1 || echo 0
0

$ (( 35 >= 15 )) && (( 35 < 30 ))  && echo 1 || echo 0
0
</code>
==== check if an integer is equal to another integer ====
tags | equality
<code>
    current_minute=`date +'%M'`
    clean_up_minute=15
    if [ "$current_minute" -eq "$clean_up_minute" ];
    then
        /* do something */
    fi
</code>

It works for both positive and negative integers.
<code>
$ [ 15 -eq 2 ] && echo 1 || echo 0
0

$ [ 15 -eq 15 ] && echo 1 || echo 0
1

$ [ -15 -eq 15 ] && echo 1 || echo 0
0

$ [ -15 -eq -15 ] && echo 1 || echo 0
1
</code>

But not for floating point numbers
<code>
$ [ 1.5 -eq 2 ] && echo 1 || echo 0
bash: [: 1.5: integer expression expected
0

$ [ 15 -eq 2.0 ] && echo 1 || echo 0
bash: [: 2.0: integer expression expected
0

$ [ 2.0 -eq 2.0 ] && echo 1 || echo 0
bash: [: 2.0: integer expression expected
0
</code>
===== Scripting =====
==== echo a string with multiple spaces ====
Put the variable in double quotes to prevent field splitting
<code>
echo "$a"
</code>
Example:
<code>
$ a='^  foo|'

$ echo $a
^ foo|

$ echo "$a"
^  foo|
</code>

Ref:- https://unix.stackexchange.com/questions/273660/how-do-i-echo-a-string-with-multiple-spaces-in-bash-untouched/273663

search tags | string concatenation multiple spaces

==== stackoverflow links I came across ====
  * https://stackoverflow.com/questions/18668556/how-can-i-compare-numbers-in-bash
      * check if a number is greater than something
      * compare numbers
