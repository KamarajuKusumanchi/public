==== create parser ====
<code>
import argparse

def create_parser():
    parser = argparse.ArgumentParser(description='Get list of elements')
    parser.add_argument('elements', nargs='+', help="list of elements")
    return parser

if __name__ == '__main__':
    parser = create_parser()
    args = parser.parse_args()
</code>

  * http://dustinrcollins.com/testing-python-command-line-apps - shows how to test command line python apps. Notice how he breaks up the code. The function create_parser() only initializes the parser and adds arguments. The actual parsing is done after calling the create_parser() function. This way we can use create_parser() in unit tests and modify it as needed.

==== only allow some values for a positional argument ====
tags | valid values

Example 1:

<code>
parser.add_argument("--model", required=True, choices=['slow', 'fast'], help='model specification.')
</code>

Example 2:

<code>
parser.add_argument("access", action='store',
    choices=['allow', 'deny'], help='type of access')
</code>

Ref:-
  * https://docs.python.org/library/argparse.html#choices
  * https://stackoverflow.com/questions/15836713/allowing-specific-values-for-an-argparse-argument

==== --feature and --no-feature ====
To do
<code>
command --feature
</code>
and
<code>
command --no-feature
</code>

For python >= 3.9:
<code>
parser.add_argument('--feature', action=argparse.BooleanOptionalAction)
</code>

For python < 3.9:
<code>
parser.add_argument('--feature', action='store_true')
parser.add_argument('--no-feature', dest='feature', action='store_false')
parser.set_defaults(feature=True)
</code>

In practice:
<code>
parser.add_argument(
    "--header", action='store_true',
    dest='header',
    help='use 1st line as header')
parser.add_argument(
    "--no-header", action='store_false',
    dest='header',
    help='assumes that there is no header')
parser.set_defaults(header=True)
</code>

Ref:-
  * https://stackoverflow.com/questions/15008758/parsing-boolean-values-with-argparse
  * https://docs.python.org/3/library/argparse.html#action -> search for ''<nowiki>--no-foo</nowiki>''

==== extend arguments ====
tags | add a variable to parsed arguments, add a variable to Namespace

<code>
$ cat extend_arguments.py
#! /usr/bin/env python
import argparse

def create_parser():
    parser = argparse.ArgumentParser(description="extend arguments")
    parser.add_argument(
        '-v', '--verbose', action='store_true', default=False, dest='verbose',
        help='verbose output')
    return parser

def extend_args(args: argparse.Namespace, extra_args: dict) -> argparse.Namespace:
    new_args = argparse.Namespace(**vars(args), **extra_args)
    return new_args

if __name__ == "__main__":
    parser = create_parser()
    args = parser.parse_args()
    if args.verbose:
        print(args)
    args = extend_args(args, {'foo': 9})
    if args.verbose:
        print(args)
</code>

<code>
$ ./extend_arguments.py -v
Namespace(verbose=True)
Namespace(verbose=True, foo=9)
</code>

See also:
  * https://stackoverflow.com/questions/2597278/python-load-variables-in-a-dict-into-namespace
  * https://docs.python.org/3/library/argparse.html
